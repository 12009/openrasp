// $Id$
// vim:ft=javascript

ARG_ENABLE("openrasp", "enable openrasp support", "no");

if (PHP_OPENRASP != "no") {

	CHECK_LIB("winmm.lib", "openrasp");
	CHECK_LIB("dbghelp.lib", "openrasp");
	CHECK_LIB("shlwapi.lib", "openrasp");
	CHECK_LIB("v8.dll.lib", "openrasp");
	CHECK_LIB("v8_libbase.dll.lib", "openrasp");
	CHECK_LIB("v8_libplatform.dll.lib", "openrasp");

	if (CHECK_LIB("ws2_32.lib", "openrasp", PHP_OPENRASP)
	&& CHECK_LIB("Iphlpapi.lib", "openrasp", PHP_OPENRASP)
	&& CHECK_HEADER_ADD_INCLUDE("winsock2.h", "CFLAGS_OPENRASP")) {
		AC_DEFINE('HAVE_IPHLPAPI_WS2', 1);
	} else {
		WARNING("GetAdaptersInfo not supported; libraries and headers not found");
	}
	
	CHECK_HEADER_ADD_INCLUDE("v8.h", "CFLAGS_OPENRASP");

	ADD_FLAG("CFLAGS_OPENRASP", "/I " + configure_module_dirname);
	ADD_FLAG("CFLAGS_OPENRASP", "/EHcs");
	ADD_FLAG("CFLAGS_OPENRASP", "/D _ALLOW_KEYWORD_MACROS");
	ADD_FLAG("CFLAGS_OPENRASP", "/D ZEND_WIN32_FORCE_INLINE");
	ADD_FLAG("CFLAGS_OPENRASP", "/D __STDC_LIMIT_MACROS");

	EXTENSION("openrasp",
	"openrasp.cc \
	openrasp_utils.c \
	openrasp_hook.cc \
	openrasp_inject.cc \
	openrasp_log.c \
	openrasp_shared_alloc.c  \
	openrasp_shared_alloc_mmap.c  \
	openrasp_shared_alloc_win32.c  \
	openrasp_v8.cc \
	openrasp_v8_platform.cc \
	openrasp_v8_request_context.cc \
	openrasp_v8_utils.cc \
	openrasp_security_policy.cc"
	, true);

	ADD_SOURCES(configure_module_dirname + "/hook", "openrasp_array.cc openrasp_sql.cc openrasp_file.cc", "openrasp");
}

